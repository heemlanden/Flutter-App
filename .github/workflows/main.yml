name: Flutter Xcode Fake-Sign Build

on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs: 
      release__nightly:
        description: Create a nightly release
        type: boolean
        required: false
env:
  scheme: "Runner"
  simulator: false

jobs:
  build-ios:
    name: Build for iOS
    runs-on: macos-latest
    outputs:
      simulator: ${{ env.simulator }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: stable

      - name: Get Flutter dependencies
        run: flutter pub get


      - name: Build unsigned IPA
        run: |
          if [ "${{ env.simulator }}" = "true" ]; then
            flutter build ios --simulator
          else
            flutter build ipa --no-codesign
          fi

      - name: List build output (debug)
        run: ls -R build/ios

      - name: Tar Build Artifact
        run: |
          if [ "${{ env.simulator }}" = "true" ]; then
            tar -cvf "archive.xcarchive.tar" "build/ios/iphonesimulator/${{ env.scheme }}.app"
            flutter clean
          else
            tar -cvf "archive.xcarchive.tar" "build/ios/archive/${{ env.scheme }}.xcarchive"
            flutter clean
          fi
          
      - name: Upload iOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: archive.xcarchive.tar

  build-android:
    name: Build for Android
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      artifact: ${{ env.scheme }}.apk
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: stable

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Build for android
        run: |
          flutter build apk
          cp build/app/outputs/flutter-apk/app-release.apk  ${{ env.scheme }}.apk
          
      - name: Upload to Appetize
        run: |
          curl -X POST https://api.appetize.io/v1/apps/b_b5ezsou7ugqlvcx4kdlqc2qnlm \
            -H "X-API-KEY: tok_hcmzfynu557ajoqatemivzekeq" \
            -F "file=@${{ env.scheme }}.apk" \
            -F "platform=android"

      - name: Upload Android Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.scheme }}.apk
          path: ${{ env.scheme }}.apk


  package:
    name: Create IPA
    runs-on: macos-latest
    if: ${{ needs.build-ios.outputs.simulator == 'false' }}
    needs: [build-ios]
    permissions:
      contents: write
    outputs:
      artifact: ${{ env.scheme }}.ipa

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-app

      - name: Extract Build Artifact
        run: |
          tar -xf "archive.xcarchive.tar"


      - name: Create IPA
        run: |
          ls
          APP_PATH="build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app"
          mkdir -p Payload
          cp -r "$APP_PATH" Payload/
          zip -r "Runner.ipa" Payload -x "._*" -x ".DS_Store" -x "__MACOSX"


      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.scheme }}.ipa
          path: ${{ env.scheme }}.ipa
  
  release__nightly:
    name: Release
    permissions:
      contents: write
    if: inputs.release__nightly || github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [package, build-android]
    concurrency:
      group: release__nightly
      cancel-in-progress: true

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact }}
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-android.outputs.artifact }}

      - name: Nightly Release
        uses: andelf/nightly-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          body: |
            This is a nightly release [created automatically with GitHub Actions workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}).
          files: |
            ${{ needs.package.outputs.artifact }}
            ${{ needs.build-android.outputs.artifact }}
